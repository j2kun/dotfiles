# include sensitive user information in a separate, unversioned file
[include]
    path = ~/.gitconfig.local

[user]
    name = Jeremy Kun
    email = j2kun@users.noreply.github.com

[core]
    editor = nvim
    # cargo install git-delta
    pager = delta

[github]
    user = j2kun

[init]
    defaultBranch = main

[branch]
    # sort branches in `git branch` by most recently used
    sort = -committerdate

[push]
    # automatically creates a remote branch with the same name as the local
    # branch
    default = current

[pull]
    rebase = true

[merge]
    conflictstyle = zdiff3

[commit]
    # puts the diff in the commit editor so you can see it while writing the
    # commit message
    verbose = true

[help]
    autocorrect = prompt

[rebase]
    # git commit --fixup <old-commit> to create a fixup commit
    # autosquash ensures it is automatically squashed into the old commit
    # when rebasing
    autosquash = true

[rerere]
    enabled = true

[color]
    ui = true

[interactive]
    diffFilter = delta --color-only

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

# cargo install git-delta
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false
    side-by-side = true

[diff]
    colorMoved = default
    algorithm = histogram

# always use ssh remotes when pushing, even if https is cloned
[url "git@github.com:"]
    pushInsteadOf = "https://github.com/"

[alias]
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
    fresh = !git switch main && git pull

    # install https://github.com/Refefer/quickfind
    go = !git grep -n $1 | qf

    it = !git init && git commit -m "root" --allow-empty
    l = !git log --graph -n 6 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit | cat
    please = push --force-with-lease
    recent = for-each-ref --sort=-committerdate refs/heads/
    remain = !git checkout main && git pull && git checkout - && git rebase main
    s = status --short --branch
    exec = "!exec "
    # Squash all commits onto the target revision and combine the commit messages into one
    # Usage: git squash main && git commit --amend (to optionally reword the message)
    squash = "!f(){ CUR=`git rev-parse HEAD` && git reset --soft ${1} && git commit -m \"$(git log --format=%B ${1}..${CUR})\"; };f"
    # Squash all commits onto the target revision and use the earliest commit message
    # Usage: git squash-quiet main
    squash-quiet = "!f(){ CUR=`git rev-parse HEAD` && FIRST=$(git rev-list ${1}..HEAD | tail -n 1) && git reset --soft ${1} && git commit -m \"$(git log --format=%B -n 1 ${FIRST})\"; };f"

[merge "bazel-lockfile-merge"]
	name = Merge driver for the Bazel lockfile (MODULE.bazel.lock)
	driver = "jq -s '# Merges an arbitrary number of MODULE.bazel.lock files.\n#\n# Input: an array of MODULE.bazel.lock JSON objects (as produced by `jq -s`).\n# Output: a single MODULE.bazel.lock JSON object.\n#\n# This script assumes that all files are valid JSON and have a numeric\n# \"lockFileVersion\" field. It will not fail on any such files, but only\n# preserves information for files with a version of 10 or higher.\n#\n# The first file is considered to be the base when deciding which values to\n# keep in case of conflicts.\n\n# Like unique, but preserves the order of the first occurrence of each element.\ndef stable_unique:\n  reduce .[] as $item ([]; if index($item) == null then . + [$item] else . end);\n\n# Given an array of objects, shallowly merges the result of applying f to each\n# object into a single object, with a few special properties:\n# 1. Values are uniquified before merging and then merged with last-wins\n#    semantics. Assuming that the first value is the base, this ensures that\n#    later occurrences of the base value do not override other values. For\n#    example, when this is called with B A1 A2 and A1 contains changes to a\n#    field but A2 does not (compared to B), the changes in A1 will be preserved.\n# 2. Object keys on the top level are sorted lexicographically after merging,\n#    but are additionally split on \":\". This ensures that module extension IDs,\n#    which start with labels, sort as strings in the same way as they due as\n#    structured objects in Bazel (that is, //python/extensions:python.bzl\n#    sorts before //python/extensions/private:internal_deps.bzl).\ndef shallow_merge(f):\n  map(f) | stable_unique | add | to_entries | sort_by(.key | split(\":\")) | from_entries;\n\n(\n    # Ignore all MODULE.bazel.lock files that do not have the maximum\n    # lockFileVersion.\n    (map(.lockFileVersion) | max) as $maxVersion\n    | map(select(.lockFileVersion == $maxVersion))\n    | {\n        lockFileVersion: $maxVersion,\n        registryFileHashes: shallow_merge(.registryFileHashes),\n        selectedYankedVersions: shallow_merge(.selectedYankedVersions),\n        # Group extension results by extension ID across all lockfiles with\n        # shallowly merged factors map, then shallowly merge the results.\n        moduleExtensions:  (map(.moduleExtensions | to_entries)\n                           | flatten\n                           | group_by(.key)\n                           | shallow_merge({(.[0].key): shallow_merge(.value)}))\n    }\n)? //\n    # We get here if the lockfiles with the highest lockFileVersion could not be\n    # processed, for example because all lockfiles have lockFileVersion < 10.\n    # In this case Bazel 7.2.0+ would ignore all lockfiles, so we might as well\n    # return the first lockfile for the proper \"mismatched version\" error\n    # message.\n    .[0]' -- %O %A %B > %A.jq_tmp && mv %A.jq_tmp %A"
