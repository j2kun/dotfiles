# include sensitive user information in a separate, unversioned file
[include]
    path = ~/.gitconfig.local

[user]
    name = Jeremy Kun
    email = j2kun@users.noreply.github.com

[core]
    editor = vim
    # cargo install git-delta
    pager = delta

[github]
    user = j2kun

[init]
    defaultBranch = main

[branch]
    # sort branches in `git branch` by most recently used
    sort = -committerdate

[push]
    # automatically creates a remote branch with the same name as the local
    # branch
    default = current

[pull]
    rebase = true

[merge]
    conflictstyle = zdiff3

[commit]
    # puts the diff in the commit editor so you can see it while writing the
    # commit message
    verbose = true

[help]
    autocorrect = prompt

[rebase]
    # git commit --fixup <old-commit> to create a fixup commit
    # autosquash ensures it is automatically squashed into the old commit
    # when rebasing
    autosquash = true

[rerere]
    enabled = true

[color]
    ui = true

[interactive]
    diffFilter = delta --color-only

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

# cargo install git-delta
[delta]
    navigate = true    # use n and N to move between diff sections
    light = false
    side-by-side = true

[diff]
    colorMoved = default
    algorithm = histogram

# always use ssh remotes when pushing, even if https is cloned
[url "git@github.com:"]
	pushInsteadOf = "https://github.com/"

[alias]
    change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
    fresh = !git switch main && git pull
    go = "!sh -c \"nvim $(git grep --name-only $1 | head -n 1)\" -"
    it = !git init && git commit -m "root" --allow-empty
    l = !git log --graph -n 6 --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit | cat
    please = push --force-with-lease
    recent = for-each-ref --sort=-committerdate refs/heads/
    remain = !git checkout main && git pull && git checkout - && git rebase main
    s = status --short --branch
    exec = "!exec "

